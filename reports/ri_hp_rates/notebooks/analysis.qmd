#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#| label: setup
library(googlesheets4)
library(arrow)
library(dplyr)
library(ggplot2)
library(GGally)
library(lubridate)
library(patchwork)
library(ggrepel)

# Switchbox Libraries
source("/workspaces/reports2/lib/ggplot/switchbox_theme.R")
source("/workspaces/reports2/lib/rates_analysis/heat_pump_rate_funcs.R")
source("/workspaces/reports2/lib/rates_analysis/heat_pump_rate_plots.R")
source("/workspaces/reports2/lib/rates_analysis/create_sb_housing_units.R")
#
#
#
#
#| label: parameters
supply_year <- 2024
round_percent <- 1
round_dollars <- 0

# Define which monthly data and which upgrades to use
# path_monthly_data <- "/workspaces/reports2/data/resstock/2024_release2_tmy3/load_curve_monthly_10"
path_monthly_data <- "/workspaces/reports2/data/resstock/2024_release2_tmy3/load_curve_monthly"
use_these_upgrades <- c("00", "01", "02", "03")

# Define seasons
winter_months <- c(1, 2, 3, 4, 11, 12)
summer_months <- c(5, 6, 7, 8, 9, 10)

hp_option <- "hp_high"

if (hp_option == "hp_low") {
  upgrade_option <- 1
} else if (hp_option == "hp_high") {
  upgrade_option <- 2
} else if (hp_option == "hp_best") {
  upgrade_option <- 3
}

# Tariffs and other sheets from GDrive
# Load Delivery Rates and associated LMI Thresholds
url_delivery_rates <- "https://docs.google.com/spreadsheets/d/17mTVgMnZaROOimWJBaVp-M-p5P96bK9g_iyjkKTJ2Mk/edit?gid=1792930160#gid=1792930160"

# SMI thresholds
url_smi_thresholds <- "https://docs.google.com/spreadsheets/d/1bVbr8jDF8YgT6-yiEEpg-RFvMdV7veoapFzhZYVcaWg/edit?gid=0#gid=0"

# Cache
path_to_cache <- "/workspaces/reports2/src/ri_hp_rates/cache"


load_tariffs_from_cache <- FALSE
load_results_from_cache <- FALSE
#
#
#
#
#| label: color definitions
scenario_colors <- c(
  "baseline_rates_current_hvac" = "grey50",
  "baseline" = "#023047",
  "baseline_rates_low_hp" = "#023047",
  "baseline_rates_mid_hp" = "#023047",
  "baseline_rates_high_hp" = "#023047",
  "hpr_approved" = "#FC9706",
  "approved_low_hp" = "#FC9706",
  "approved_mid_hp" = "#FC9706",
  "approved_high_hp" = "#FC9706",
  "hpr_doer" = "#68BED8",
  "doer_low_hp" = "#68BED8",
  "doer_mid_hp" = "#68BED8",
  "doer_high_hp" = "#68BED8"
)

heating_type_colors <- c(
  "Natural Gas" = "#8C510A", # brown
  "Fuel Oil" = "#D8B365", # light brown
  "Propane" = "#F6E8C3", # very light brown
  "Electric Resistance" = "#5AB4AC", # BrBG palette
  "Heat Pump" = "#80CDC1", # BrBG palette
  "Other/None" = "grey50" # BrBG palette
)

cooling_type_colors <- c(
  "Central AC" = "#8C510A", # brown
  "Room AC" = "#D8B365", # light brown
  "Heat Pump" = "#80CDC1", # very light brown
  "Other Cooling" = "#5AB4AC", # BrBG palette
  "None" = "grey50" # BrBG palette
)

building_type_colors <- c(
  "Single-Family" = "#234267", # darkest dusty blue
  "2-4 Units" = "#6383A9", # medium dusty blue
  "5+ Units" = "#B2C7DF", # lightest dusty blue
  "Other" = "#80CDC1" # BrBG palette for other
)

occupants_group_colors <- c(
  "Vacant" = "#424242", # dark grey
  "Single" = "#D1BFE6", # light dusty purple
  "Couple" = "#A285C8", # medium dusty purple
  "3-4 Occupants" = "#7C579A", # darker dusty purple
  "5+ Occupants" = "#4C266A" # darkest dusty purple
)

smi_tier_colors <- c(
  "No Income" = "#424242", # dark grey
  "Low Income" = "#B4C6A6", # light dusty green
  "Moderate Income" = "#7D9D81", # medium dusty green
  "Not LMI" = "#475D4B" # dark dusty green
)

smi_tier_label_colors <- c(
  "No Income" = "#424242", # dark grey
  "Low Income (<60% SMI)" = "#B4C6A6", # light dusty green
  "Moderate Income (60â€“100% SMI)" = "#7D9D81", # medium dusty green
  "Not LMI (>100% SMI)" = "#475D4B" # dark dusty green
)

dollar_tier_colors <- c(
  "No Income" = "#424242", # dark grey
  "Low Income" = "#B4C6A6", # light dusty green
  "Moderate Income" = "#7D9D81", # medium dusty green
  "Not LMI" = "#475D4B" # dark dusty green
)

bill_component_colors <- c(
  "annual_gas_bill" = "grey50", # grey
  "annual_fuel_oil_bill" = "grey50", # grey
  "supply_charge" = "#A0AF12",
  "delivery_charge" = "#023047",
  "customer_charge" = "#68BED8",
  "pre_hp_delivery_total" = "#FC9706"
)


energy_burden_colors <- c(
  "low_energy_burden" = "#5e8a5e", # dark green
  "moderate_energy_burden" = "#8ebd85", # light green
  "high_energy_burden" = "#eaada9", # light red
  "very_high_energy_burden" = "#db8b87" # dark red
)

#
#
#
#
#| label: load delivery tariffs and supply rates

# Delivery Tariffs and LMI Discount Thresholds
load_or_download <- function(table_name, url, path_to_cache = "/workspaces/reports2/src/ri_hp_rates/cache", load_from_cache = FALSE) {
  # Construct file path for this table
  file_path <- paste0(path_to_cache, "/", table_name, ".RData")
  print(paste0("file_path: ", file_path))

  # Try to load from cache first
  if (load_from_cache && file.exists(file_path)) {
    print(paste0("Attempting to load from cache: ", file_path))
    load(file_path, envir = .GlobalEnv)
    assign(table_name, data, envir = .GlobalEnv)
    print(paste0("Loaded cached ", table_name))
  } else {
    # Download if not found
    googlesheets4::gs4_deauth()
    print(paste0("Downloading ", table_name))
    # Read the sheet and throw out columns-for-humans
    data <- read_sheet(url, sheet = table_name) |>
      select(-source, -notes)

    # if billing_unit is anything other than "dollars", "dollars_per_kwh", or "percentage", we convert it to "dollars_per_kwh"
    if (str_detect(table_name, "tariffs")) {
      print("...converting billing_unit from dollar_per_therm to dollars_per_kwh")
      data <- data |>
        mutate(
          value = case_when(
            billing_unit == "dollars_per_therm" ~ value / 29.3,
            TRUE ~ value
          ),
          billing_unit = case_when(
            billing_unit == "dollars_per_therm" ~ "dollars_per_kwh",
            TRUE ~ billing_unit
          )
        )
    }

    # tariffs are specified by season, so we need to expand them out to the monthly grid
    if (str_detect(table_name, "tariffs")) {
      print("...expanding tariffs out to the monthly grid")
      # The tariffs are specified by season, so we need to expand them out to the monthly grid
      delivery_winter_months <- c(1, 2, 3, 11, 12)
      delivery_summer_months <- c(4, 5, 6, 7, 8, 9, 10)
      data <- data |>
        # Create a mapping of months to each season
        cross_join(
          tibble(
            month = 1:12,
            season_mapping = case_when(
              month %in% delivery_winter_months ~ "winter",
              month %in% delivery_summer_months ~ "summer"
            )
          )
        ) |>
        # Keep only the rows where the season matches the month's season
        filter(season == season_mapping) |>
        # Convert month to int32
        mutate(month = as.integer(month)) |>
        # Remove the helper columns
        select(-season, -season_mapping) |>
        # Arrange for better organization
        arrange(class, type, tariff_name, month)
    }


    # if table_name is gas_delivery_tariffs, we need combine several rows to get an all-in delivery rate
    if (str_detect(table_name, "gas_delivery_tariffs")) {
      print("...combining several rows to get an all-in delivery rate")

      # First, get all the rows that are NOT the ones we want to combine
      other_rows <- data |>
        filter(!type %in% c("adjustment_rate", "distribution_rate", "programs"))

      # Then, create the combined delivery_rate rows
      delivery_rate_rows <- data |>
        filter(type %in% c("adjustment_rate", "distribution_rate", "programs")) |>
        group_by(tariff_name, gas_utility, heat_non_heat, version, month) |>
        summarise(
          value = sum(value, na.rm = TRUE),
          type = "delivery_rate",
          # Keep other columns from the first row of each group
          class = first(class),
          cost_category = first(cost_category),
          customer_class = first(customer_class),
          tariff_name = first(tariff_name),
          billing_unit = first(billing_unit),
          lmi = first(lmi),
          effective_date = first(effective_date),
          .groups = "drop"
        )

      # Combine the results
      data <- bind_rows(other_rows, delivery_rate_rows)
    }


    # supply rates are specified by year
    if (str_detect(table_name, "supply")) {
      print("...converting supply rates to int32")
      data <- data |>
        mutate(
          month = as.integer(month),
          year = as.integer(year)
        )
    }


    # Save to cache
    save(data, file = file_path)
    assign(table_name, data, envir = .GlobalEnv)
    print(paste0("Downloaded and cached ", table_name))
  }
}
#
#
#
#
#
#
#| label: load housing units


use_these_in_columns <- c(
  "bldg_id",
  "upgrade",
  "in.representative_income",
  "in.income",
  "in.city",
  "in.geometry_building_type_acs",
  "in.heating_fuel",
  "in.hvac_cooling_type",
  "in.hvac_heating_type_and_fuel",
  "in.occupants",
  "in.state",
  "in.vintage",
  "in.weather_file_city",
  "in.vacancy_status"
)

use_these_out_columns <- c(
  "out.electricity.total.energy_consumption.kwh",
  "out.fuel_oil.total.energy_consumption.kwh",
  "out.natural_gas.total.energy_consumption.kwh",
  "out.propane.total.energy_consumption.kwh"
)


use_these_states <- c("RI")
path_to_supply_year_metadata_dir <- "/workspaces/reports2/data/resstock/2024_release2_tmy3/metadata"


# Create pattern to match only the desired upgrade files
upgrade_patterns <- paste0("upgrade", use_these_upgrades, "_metadata_and_annual_results\\.parquet$")
upgrade_pattern <- paste(upgrade_patterns, collapse = "|")

# Get only the upgrade parquet files that match our criteria
parquet_files <- list.files(
  path_to_supply_year_metadata_dir,
  pattern = upgrade_pattern,
  full.names = TRUE
)

# Create a lazy dataset from selected parquet files
housing_units <- open_dataset(parquet_files) |>
  select(all_of(use_these_in_columns), all_of(use_these_out_columns)) |>
  filter(`in.state` %in% use_these_states) |>
  collect()

#-----------------------------------------------------------------
# Preferred labels for heating type, cooling type, building type, and occupants group
#-----------------------------------------------------------------
# Update baseline heating type
housing_units <- add_baseline_heating_type(housing_units)
housing_units$baseline_heating_type <- factor(
  housing_units$baseline_heating_type,
  levels = c("Natural Gas", "Fuel Oil", "Propane", "Electric Resistance", "Heat Pump", "Other/None")
)

# Update baseline cooling type
housing_units <- add_baseline_cooling_type(housing_units)
housing_units$baseline_cooling_type <- factor(
  housing_units$baseline_cooling_type,
  levels = c("Room AC", "Central AC", "Heat Pump", "Other Cooling", "None")
)

# Update building type group
housing_units <- update_building_type_group(housing_units)
housing_units$building_type_group <- factor(
  housing_units$building_type_group,
  levels = c("Single-Family", "2-4 Units", "5+ Units", "Other")
)


# Add heat_non_heat
# housing_units <- add_heat_non_heat(housing_units)

# Add hvac, hvac_backup, shell, and appliances
housing_units <- add_hvac_appliances_shell(housing_units)

# Change occupants to number
housing_units <- change_occupants_to_number(housing_units)

# Add occupants group
housing_units <- add_occupants_group(housing_units)
housing_units$occupants_group <- factor(
  housing_units$occupants_group,
  levels = c("Vacant", "Single", "Couple", "3-4 Occupants", "5+ Occupants")
)

# Change upgrade to 2f strings (eg 1 -> "01")
# housing_units <- change_upgrade_to_2f_strings(housing_units)
# housing_units <- housing_units |>
#   mutate(upgrade = sprintf("%02d", as.numeric(upgrade))
#   )

#-----------------------------------------------------------------
# Income
#-----------------------------------------------------------------

# Inflate income to 2024
housing_units <- inflate_income_to_2024(housing_units, from_year = 2019)

# 2024 Rhode Island state median income is $92,290 (https://fred.stlouisfed.org/series/MEHOINUSRIA646N)
# 60% -> $55,374
# 80% -> $73,832
# 100% -> $92,290
housing_units <- group_income_by_dollars(housing_units, dollar_tiers = c(1000, 55374, 92290))
housing_units$dollar_tier <- factor(
  housing_units$dollar_tier,
  levels = c("No Income", "Low Income", "Moderate Income", "Not LMI")
)

# Add SMI tiers
housing_units <- group_income_by_smi(housing_units, table_name = "smi_thresholds_2024", url_smi_thresholds = url_smi_thresholds, smi_tiers = c(0.6, 1.0))
housing_units$smi_tier <- factor(
  housing_units$smi_tier,
  levels = c("No Income", "Low Income", "Moderate Income", "Not LMI")
)

#-----------------------------------------------------------------
# Extensions: add elec and gas utility assignments, then LMI discounts
#-----------------------------------------------------------------
# Assign electricity utility
housing_units <- assign_utilities(housing_units)

# Add LMI discounts
load_or_download("electric_lmi_thresholds", url_delivery_rates, load_from_cache = FALSE)
load_or_download("gas_lmi_thresholds", url_delivery_rates, load_from_cache = FALSE)
housing_units <- add_lmi_discount(housing_units, electric_lmi_thresholds, gas_lmi_thresholds)


# Add fuel oil utility
housing_units <- housing_units |>
  mutate(
    fuel_oil_utility = "generic_retail",
    discount_rate_fuel_oil = 0
  )

# Add propane utility
housing_units <- housing_units |>
  mutate(
    propane_utility = "generic_retail",
    discount_rate_propane = 0
  )


# Print column names of housing_units
print("Column names in housing_units:")
print(colnames(housing_units))

n_total_homes <- housing_units |>
  filter(upgrade == 0) |>
  nrow()

housing_units <- housing_units |>
  filter(occupants_group != "Vacant")

n_non_vacant_homes <- housing_units |>
  filter(upgrade == 0) |>
  filter(occupants_group != "Vacant") |>
  nrow()

#
#
#
#
#
#
#
#| label: heating bills calculations
# Monthly Load Data
monthly_consumption_heating_elec <- get_monthly_consumption(
  path_monthly_data = path_monthly_data,
  fuel = "electricity",
  functional_group = "heating",
  use_these_upgrades = use_these_upgrades
)



#
#
#
#
#
#| label: electric bills calculations
# Electric
url_electric_supply_rates <- "https://docs.google.com/spreadsheets/d/1oq0WxARD6cY6gPE4s2TH59O4pHY0sreZNKpHFayn36g/edit?gid=0#gid=0"
load_or_download("electric_supply_rates", url_electric_supply_rates, load_from_cache = load_tariffs_from_cache)
load_or_download("electric_delivery_tariffs", url_delivery_rates, load_from_cache = load_tariffs_from_cache)

# Load from cache
if (load_results_from_cache) {
  load(file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_electric.RData")
} else {
  # Monthly Load Data
  monthly_consumption <- get_monthly_consumption(
    path_monthly_data = path_monthly_data,
    fuel = "electricity",
    functional_group = "total",
    use_these_upgrades = use_these_upgrades
  )

  # Filter out any vacant homes
  monthly_consumption <- monthly_consumption |>
    left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, occupants_group), by = c("bldg_id")) |>
    filter(occupants_group != "Vacant") |>
    select(-occupants_group)

  # Monthly Bills
  monthly_bills_elec <- calc_monthly_bills(
    monthly_consumption = monthly_consumption,
    fuel_type = "electricity",
    delivery_tariffs = electric_delivery_tariffs,
    supply_rates = electric_supply_rates,
    housing_units = housing_units,
    supply_year = supply_year,
    state = "RI",
    enable_lmi_discount = TRUE,
    use_these_upgrades = use_these_upgrades
  )

  # Monthly Change
  monthly_changes_elec <- calc_monthly_changes(monthly_bills_elec, "electricity")

  # BILLS by season
  winter_bills_elec <- calc_annual_bills_from_monthly(monthly_bills_elec, "electricity", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_bills_elec <- calc_annual_bills_from_monthly(monthly_bills_elec, "electricity", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_bills_elec <- calc_annual_bills_from_monthly(monthly_bills_elec, "electricity") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Changes by season
  winter_changes_elec <- calc_annual_change_from_monthly(monthly_changes_elec, "electricity", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_changes_elec <- calc_annual_change_from_monthly(monthly_changes_elec, "electricity", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_changes_elec <- calc_annual_change_from_monthly(monthly_changes_elec, "electricity") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Save to cache
  save(
    monthly_bills_elec,
    monthly_changes_elec,
    annual_bills_elec,
    annual_changes_elec,
    winter_bills_elec,
    winter_changes_elec,
    summer_bills_elec,
    summer_changes_elec,
    annual_bills_elec,
    annual_changes_elec,
    file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_electric.RData"
  )
}

# monthly_bills_elec_x <- monthly_bills_elec |> filter(bldg_id == bldg_id_x) |> View()
# monthly_changes_elec_x <- monthly_changes_elec |> filter(bldg_id == bldg_id_x) |> View()
# annual_bills_elec_x <- annual_bills_elec |> filter(bldg_id == bldg_id_x) |> View()
# annual_changes_elec_x <- annual_changes_elec |> filter(bldg_id == bldg_id_x) |> View()
#
#
#
#
#| label: fuel oil bills calculations
# Fuel Oil Supply Rates
path_fuel_oil_supply_rates <- "/workspaces/reports2/data/eia/heating_oil/ri_eia_heating_oil_prices_monthly.parquet"
fuel_oil_supply_rates <- open_dataset(path_fuel_oil_supply_rates) |>
  select(year, month, supply_rate, fuel_oil_utility) |>
  filter(year == supply_year) |>
  collect()

# Delivery Tariffs
load_or_download("fuel_oil_delivery_tariffs", url_delivery_rates, load_from_cache = load_tariffs_from_cache)
load_or_download("fuel_oil_lmi_thresholds", url_delivery_rates, load_from_cache = load_tariffs_from_cache)

# Load from cache
if (load_results_from_cache) {
  load(file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_fuel_oil.RData")
} else {
  # Monthly Load Data
  monthly_consumption <- get_monthly_consumption(
    path_monthly_data = path_monthly_data,
    fuel = "fuel_oil",
    functional_group = "total",
    use_these_upgrades = use_these_upgrades
  )

  # Filter out any vacant homes
  monthly_consumption <- monthly_consumption |>
    left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, occupants_group), by = c("bldg_id")) |>
    filter(occupants_group != "Vacant")

  # Monthly Bills
  monthly_bills_fuel_oil <- calc_monthly_bills(
    monthly_consumption = monthly_consumption,
    fuel_type = "fuel_oil",
    delivery_tariffs = fuel_oil_delivery_tariffs,
    supply_rates = fuel_oil_supply_rates,
    housing_units = housing_units,
    supply_year = supply_year,
    state = "RI",
    use_these_upgrades = use_these_upgrades
  )


  # Monthly Change
  monthly_changes_fuel_oil <- calc_monthly_changes(monthly_bills_fuel_oil, "fuel_oil")

  # BILLS by season
  winter_bills_fuel_oil <- calc_annual_bills_from_monthly(monthly_bills_fuel_oil, "fuel_oil", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_bills_fuel_oil <- calc_annual_bills_from_monthly(monthly_bills_fuel_oil, "fuel_oil", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_bills_fuel_oil <- calc_annual_bills_from_monthly(monthly_bills_fuel_oil, "fuel_oil") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Changes by season
  winter_changes_fuel_oil <- calc_annual_change_from_monthly(monthly_changes_fuel_oil, "fuel_oil", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_changes_fuel_oil <- calc_annual_change_from_monthly(monthly_changes_fuel_oil, "fuel_oil", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_changes_fuel_oil <- calc_annual_change_from_monthly(monthly_changes_fuel_oil, "fuel_oil") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Save to cache
  save(
    monthly_bills_fuel_oil,
    monthly_changes_fuel_oil,
    annual_bills_fuel_oil,
    annual_changes_fuel_oil,
    winter_bills_fuel_oil,
    winter_changes_fuel_oil,
    summer_bills_fuel_oil,
    summer_changes_fuel_oil,
    annual_bills_fuel_oil,
    annual_changes_fuel_oil,
    file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_fuel_oil.RData"
  )
}

# monthly_bills_fuel_oil_x <- monthly_bills_fuel_oil |> filter(bldg_id == bldg_id_x) |> View()
# monthly_changes_fuel_oil_x <- monthly_changes_fuel_oil |> filter(bldg_id == bldg_id_x) |> View()
# annual_bills_fuel_oil_x <- annual_bills_fuel_oil |> filter(bldg_id == bldg_id_x) |> View()
# annual_changes_fuel_oil_x <- annual_changes_fuel_oil |> filter(bldg_id == bldg_id_x) |> View()

#
#
#
#
#| label: propane bills calculations
# Propane Supply Rates
path_propane_supply_rates <- "/workspaces/reports2/data/eia/propane/ri_eia_propane_prices_monthly.parquet"
propane_supply_rates <- open_dataset(path_propane_supply_rates) |>
  select(year, month, supply_rate, propane_utility) |>
  filter(year == supply_year) |>
  collect()

# Delivery Tariffs
load_or_download("propane_delivery_tariffs", url_delivery_rates, load_from_cache = load_tariffs_from_cache)
load_or_download("propane_lmi_thresholds", url_delivery_rates, load_from_cache = load_tariffs_from_cache)

# Load from cache
if (load_results_from_cache) {
  load(file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_propane.RData")
} else {
  # Monthly Load Data
  monthly_consumption <- get_monthly_consumption(
    path_monthly_data = path_monthly_data,
    fuel = "propane",
    functional_group = "total",
    use_these_upgrades = use_these_upgrades
  )

  # Filter out any vacant homes
  monthly_consumption <- monthly_consumption |>
    left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, occupants_group), by = c("bldg_id")) |>
    filter(occupants_group != "Vacant")

  # Monthly Bills
  monthly_bills_propane <- calc_monthly_bills(
    monthly_consumption = monthly_consumption,
    fuel_type = "propane",
    delivery_tariffs = propane_delivery_tariffs,
    supply_rates = propane_supply_rates,
    housing_units = housing_units,
    supply_year = supply_year,
    state = "RI",
    use_these_upgrades = use_these_upgrades
  )

  # Monthly Change
  monthly_changes_propane <- calc_monthly_changes(monthly_bills_propane, "propane")

  # BILLS by season
  winter_bills_propane <- calc_annual_bills_from_monthly(monthly_bills_propane, "propane", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_bills_propane <- calc_annual_bills_from_monthly(monthly_bills_propane, "propane", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_bills_propane <- calc_annual_bills_from_monthly(monthly_bills_propane, "propane") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Changes by season
  winter_changes_propane <- calc_annual_change_from_monthly(monthly_changes_propane, "propane", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_changes_propane <- calc_annual_change_from_monthly(monthly_changes_propane, "propane", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_changes_propane <- calc_annual_change_from_monthly(monthly_changes_propane, "propane") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Save to cache
  save(
    monthly_bills_propane,
    monthly_changes_propane,
    annual_bills_propane,
    annual_changes_propane,
    winter_bills_propane,
    winter_changes_propane,
    summer_bills_propane,
    summer_changes_propane,
    annual_bills_propane,
    annual_changes_propane,
    file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_propane.RData"
  )
}


# monthly_bills_propane_x <- monthly_bills_propane |> filter(bldg_id == bldg_id_x) |> View()
# monthly_changes_propane_x <- monthly_changes_propane |> filter(bldg_id == bldg_id_x) |> View()
# annual_bills_propane_x <- annual_bills_propane |> filter(bldg_id == bldg_id_x) |> View()
# annual_changes_propane_x <- annual_changes_propane |> filter(bldg_id == bldg_id_x) |> View()
#
#
#
#
#
#| label: gas bills calculations
# Gas Supply Rates
url_gas_supply_rates <- "https://docs.google.com/spreadsheets/d/1_2u9S3r2JWKREhD_pnWXfyQKqjc4IsImbbTdHHN7xqM/edit?gid=0#gid=0"
load_or_download("gas_supply_rates", url_gas_supply_rates, load_from_cache = load_tariffs_from_cache)
load_or_download("gas_delivery_tariffs", url_delivery_rates, load_from_cache = load_tariffs_from_cache)
load_or_download("gas_lmi_thresholds", url_delivery_rates, load_from_cache = load_tariffs_from_cache)

# Load from cache
if (load_results_from_cache) {
  load(file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_gas.RData")
} else {
  # Monthly Gas Bills
  monthly_bills_gas <- calc_monthly_bills_gas(
    path_monthly_data = path_monthly_data,
    gas_delivery_tariffs = gas_delivery_tariffs,
    gas_supply_rates = gas_supply_rates,
    housing_units = housing_units,
    supply_year = supply_year,
    state = "RI",
    enable_lmi_discount = TRUE,
    use_these_upgrades = use_these_upgrades
  )

  # Filter out any vacant homes
  monthly_bills_gas <- monthly_bills_gas |>
    left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, occupants_group), by = c("bldg_id")) |>
    filter(occupants_group != "Vacant")

  # Monthly Change
  monthly_changes_gas <- calc_monthly_changes(monthly_bills_gas, "natural_gas")


  # BILLS by season
  winter_bills_gas <- calc_annual_bills_from_monthly(monthly_bills_gas, "natural_gas", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_bills_gas <- calc_annual_bills_from_monthly(monthly_bills_gas, "natural_gas", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_bills_gas <- calc_annual_bills_from_monthly(monthly_bills_gas, "natural_gas") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Changes by season
  winter_changes_gas <- calc_annual_change_from_monthly(monthly_changes_gas, "natural_gas", months = winter_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  summer_changes_gas <- calc_annual_change_from_monthly(monthly_changes_gas, "natural_gas", months = summer_months) |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  annual_changes_gas <- calc_annual_change_from_monthly(monthly_changes_gas, "natural_gas") |>
    left_join(housing_units |> select(bldg_id, upgrade, hvac, baseline_heating_type), by = c("bldg_id", "upgrade", "hvac"))

  # Save to cache
  save(
    monthly_bills_gas,
    monthly_changes_gas,
    annual_bills_gas,
    annual_changes_gas,
    winter_bills_gas,
    winter_changes_gas,
    summer_bills_gas,
    summer_changes_gas,
    annual_bills_gas,
    annual_changes_gas,
    file = "/workspaces/reports2/src/ri_hp_rates/cache/calculated_bills_gas.RData"
  )
}

# monthly_bills_gas_x <- monthly_bills_gas |> filter(bldg_id == bldg_id_x) |> View()
# monthly_changes_gas_x <- monthly_changes_gas |> filter(bldg_id == bldg_id_x) |> View()
# annual_bills_gas_x <- annual_bills_gas |> filter(bldg_id == bldg_id_x) |> View()
# annual_changes_gas_x <- annual_changes_gas |> filter(bldg_id == bldg_id_x) |> View()

#
#
#
#
#
#| label: total annual bills

annual_bills_total <- calc_annual_bills_total(annual_bills_elec, annual_bills_gas, annual_bills_fuel_oil, annual_bills_propane)
winter_bills_total <- calc_annual_bills_total(winter_bills_elec, winter_bills_gas, winter_bills_fuel_oil, winter_bills_propane)
summer_bills_total <- calc_annual_bills_total(summer_bills_elec, summer_bills_gas, summer_bills_fuel_oil, summer_bills_propane)


#
#
#
#
#
#
#| label: total annual changes

annual_changes_total <- calc_annual_changes_total(annual_changes_elec, annual_changes_gas, annual_changes_fuel_oil, annual_changes_propane)
winter_changes_total <- calc_annual_changes_total(winter_changes_elec, winter_changes_gas, winter_changes_fuel_oil, winter_changes_propane)
summer_changes_total <- calc_annual_changes_total(summer_changes_elec, summer_changes_gas, summer_changes_fuel_oil, summer_changes_propane)
#
#
#
#
#
#
#
#
#
#
#
#
#| label: fig-stacked_bar_median_before_after_gas
#| fig-cap: "Components of total household energy bills for homes heated with natural gas, before and after upgrade to a high-efficiency cold-climate heat pump. The left column shows the median bill before upgrade, the right column shows the median bill after upgrade."

stack_order_gas_on_top <- c(
  "annual_gas_bill", # tippy top
  "annual_elec_supply_charge", # top
  "annual_elec_delivery_charge", # middle
  "annual_elec_customer_charge" # bottom
)

components <- factor(stack_order_gas_on_top, levels = stack_order_gas_on_top)

annual_bills_elec_by_component <- monthly_bills_elec |>
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Natural Gas") |>
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  group_by(bldg_id, upgrade, electric_utility, version, hvac) |>
  summarise(
    supply_charge = sum(supply_charge),
    delivery_charge = sum(delivery_charge),
    customer_charge = sum(customer_charge),
    .groups = "drop"
  ) |>
  ungroup() |>
  filter(
    (!(hvac %in% c("hp_low", "hp_high", "hp_best")) & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, electric_utility, version, hvac) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup()


annual_bills_gas_median <- annual_bills_gas |>
  filter(baseline_heating_type == "Natural Gas") |>
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  group_by(upgrade, hvac) |>
  summarise(
    annual_gas_bill = median(annual_bill),
    .groups = "drop"
  ) |>
  ungroup()


annual_bills_by_component_plot <- annual_bills_elec_by_component |>
  left_join(annual_bills_gas_median, by = c("upgrade", "hvac")) |>
  pivot_longer(
    cols = c(supply_charge, delivery_charge, customer_charge, annual_gas_bill),
    names_to = "charge_type",
    values_to = "amount"
  ) |>
  mutate(
    charge_type = factor(charge_type, levels = c("annual_gas_bill", "supply_charge", "delivery_charge", "customer_charge")),
    scenario = factor(paste(hvac, version, sep = "_"),
      levels = c("current_baseline", "hp_high_baseline")
    )
  ) |>
  filter(electric_utility == "rhode_island_energy")

y_rightmost_customer_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "customer_charge") |>
  pull(amount)
y_rightmost_delivery_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "delivery_charge") |>
  pull(amount)
y_rightmost_supply_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "supply_charge") |>
  pull(amount)
y_rightmost_gas_bill <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "annual_gas_bill") |>
  pull(amount)

annotation_text_size <- 4
y_annotation_offset <- 0
x_label_offset <- 2.5

# Create the stacked bar chart
fig_bill_stacked_bar_gas_on_top <- ggplot(
  annual_bills_by_component_plot,
  aes(x = scenario, y = amount, fill = charge_type)
) +
  geom_col() +
  labs(
    title = "Components of Annual Electricity Bill",
    x = "",
    y = "Annual Cost ($)",
    fill = "Charge Type"
  ) +
  scale_fill_manual(
    values = bill_component_colors[c("customer_charge", "delivery_charge", "supply_charge", "annual_gas_bill")],
    breaks = c("customer_charge", "delivery_charge", "supply_charge", "annual_gas_bill"),
    labels = c("Customer charge", "Delivery charge", "Supply charge", "Gas Bill")
  ) +
  scale_y_continuous(labels = scales::dollar_format(), limits = c(0, 4500), breaks = seq(0, 5000, by = 1000), expand = c(0, 0)) +
  scale_x_discrete(labels = c(
    current_baseline = "Current HVAC\nCurrent Rates",
    hp_high_baseline = "Cold Climate HP\nCurrent Rates"
  )) +
  coord_cartesian(clip = "off") +
  theme(
    text = element_text(family = "IBM-Plex-Sans"),
    axis.title.x = element_text(margin = margin(t = 3)),
    axis.title.y = element_text(margin = margin(r = 3)),
    legend.position = "bottom",
    plot.margin = margin(t = 3, r = 200, b = 0, l = 10, unit = "pt")
  ) +

  # instead of a legend, write annotation for the 3 categories to the right of the right-most bar
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge / 2) + y_annotation_offset,
    label = "Customer Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["customer_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge / 2 + y_annotation_offset,
    label = "Delivery Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["delivery_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge + y_rightmost_supply_charge / 2 + y_annotation_offset,
    label = "Supply Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["supply_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge + y_rightmost_supply_charge + y_rightmost_gas_bill / 2 + y_annotation_offset,
    label = "Gas Bill",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["annual_gas_bill"],
    size = annotation_text_size,
    fontface = "bold"
  ) +

  # No legend
  theme(legend.position = "none")

print(fig_bill_stacked_bar_gas_on_top)
#
#
#
#
#| label: fig-monthly_bills_gas_before
#| fig-cap: "The electric bill components and total gas bill for natural gas heated homes, before upgrade."

monthly_bills_elec_by_component <- monthly_bills_elec |>
  # add some metadata from housing_units
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Natural Gas") |>
  # rename hvac column to "current" (was natural_gas, propane, etc)
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  # get just the current and hp_high cases
  filter(
    (hvac == "current" & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, electric_utility, version, hvac, month) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup()

monthly_bills_gas_by_component <- monthly_bills_gas |>
  # add some metadata from housing_units
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Natural Gas") |>
  # rename hvac column to "current" (was natural_gas, propane, etc)
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  # get just the current and hp_high cases
  filter(
    (hvac == "current" & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, hvac, month) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup() |>
  mutate(
    total_gas_bill = supply_charge + delivery_charge + customer_charge
  ) |>
  # drop the supply_charge, delivery_charge, and customer_charge columns
  select(-supply_charge, -delivery_charge, -customer_charge)

monthly_bills_combined_gas_customers <- monthly_bills_elec_by_component |>
  left_join(monthly_bills_gas_by_component, by = c("upgrade", "hvac", "month")) |>
  mutate(total_bill = supply_charge + delivery_charge + customer_charge + total_gas_bill)



# Create 12 stacked bars, one for each month, for upgrade==0
monthly_bills_combined_gas_customers_long <- monthly_bills_combined_gas_customers |>
  pivot_longer(
    cols = c(customer_charge, delivery_charge, supply_charge, total_gas_bill, total_bill),
    names_to = "component",
    values_to = "amount"
  )

# Set factor order for stacking: customer_charge (bottom), delivery_charge (middle), supply_charge (top)
monthly_bills_combined_gas_customers_long$component <- factor(
  monthly_bills_combined_gas_customers_long$component,
  levels = c("total_gas_bill", "supply_charge", "delivery_charge", "customer_charge", "total_bill")
)


bill_component_colors <- c(
  "total_gas_bill" = "grey50", # grey
  "supply_charge" = "#A0AF12",
  "delivery_charge" = "#023047",
  "customer_charge" = "#68BED8",
  "total_bill" = "red"
)

print(ggplot(
  monthly_bills_combined_gas_customers_long |>
    filter(upgrade == 0) |>
    filter(component != "total_bill"),
  aes(
    x = month,
    y = amount,
    fill = component
  )
) +
  geom_bar(stat = "identity", width = 0.35) +
  scale_fill_manual(values = bill_component_colors) +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    x = "Month",
    y = "Median Monthly Total Bill ($)",
    title = "Median Monthly Total Bill (Electric + Gas)",
    subtitle = "Natural gas-heated homes, before upgrade"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  ))

#
#
#
#
#
#| label: fig-monthly_bills_gas_after
#| fig-cap: "The electric bill components and total gas bill for natural gas heated homes, after upgrade."


bill_component_colors <- c(
  "total_gas_bill" = "grey50", # grey
  "supply_charge" = "#A0AF12",
  "delivery_charge" = "#023047",
  "customer_charge" = "#68BED8",
  "total_bill" = "#e07a7a"
)

ggplot() +
  # BEFORE
  geom_bar(
    data = monthly_bills_combined_gas_customers_long |>
      filter(upgrade == 0) |>
      filter(component != "total_bill"),
    aes(x = month - 0.2, y = amount, fill = component),
    stat = "identity",
    width = 0.35
  ) +
  # AFTER
  geom_bar(
    data = monthly_bills_combined_gas_customers_long |>
      filter(upgrade == upgrade_option) |>
      filter(component != "total_bill"),
    aes(x = month + 0.2, y = amount, fill = component),
    stat = "identity",
    width = 0.35
  ) +
  scale_fill_manual(values = bill_component_colors) +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    x = "Month",
    y = "Median Monthly Total Bill ($)",
    title = "Median Monthly Total Bill (Electric + Gas)",
    subtitle = "Natural gas-heated homes, after upgrade"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )

#
#
#
#
#
#
#| label: fig-stacked_bar_median_before_after_fuel_oil
#| fig-cap: "Components of total household energy bills for homes heated with fuel oil, before and after upgrade to a high-efficiency cold-climate heat pump. The left column shows the median bill before upgrade, the right column shows the median bill after upgrade."

stack_order_fuel_oil_on_top <- c(
  "annual_fuel_oil_bill", # tippy top
  "annual_elec_supply_charge", # top
  "annual_elec_delivery_charge", # middle
  "annual_elec_customer_charge" # bottom
)

components <- factor(stack_order_fuel_oil_on_top, levels = stack_order_fuel_oil_on_top)

annual_bills_elec_by_component <- monthly_bills_elec |>
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Fuel Oil") |>
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  group_by(bldg_id, upgrade, electric_utility, version, hvac) |>
  summarise(
    supply_charge = sum(supply_charge),
    delivery_charge = sum(delivery_charge),
    customer_charge = sum(customer_charge),
    .groups = "drop"
  ) |>
  ungroup() |>
  filter(
    (!(hvac %in% c("hp_low", "hp_high", "hp_best")) & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, electric_utility, version, hvac) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup()


annual_bills_fuel_oil_median <- annual_bills_fuel_oil |>
  filter(baseline_heating_type == "Fuel Oil") |>
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  group_by(upgrade, hvac) |>
  summarise(
    annual_fuel_oil_bill = median(annual_bill),
    .groups = "drop"
  ) |>
  ungroup()


annual_bills_by_component_plot <- annual_bills_elec_by_component |>
  left_join(annual_bills_fuel_oil_median, by = c("upgrade", "hvac")) |>
  pivot_longer(
    cols = c(supply_charge, delivery_charge, customer_charge, annual_fuel_oil_bill),
    names_to = "charge_type",
    values_to = "amount"
  ) |>
  mutate(
    charge_type = factor(charge_type, levels = c("annual_fuel_oil_bill", "supply_charge", "delivery_charge", "customer_charge")),
    scenario = factor(paste(hvac, version, sep = "_"),
      levels = c("current_baseline", "hp_high_baseline")
    )
  ) |>
  filter(electric_utility == "rhode_island_energy")

y_rightmost_customer_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "customer_charge") |>
  pull(amount)
y_rightmost_delivery_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "delivery_charge") |>
  pull(amount)
y_rightmost_supply_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "supply_charge") |>
  pull(amount)
y_rightmost_fuel_oil_bill <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "annual_fuel_oil_bill") |>
  pull(amount)

annotation_text_size <- 4
y_annotation_offset <- 0
x_label_offset <- 2.5

# Create the stacked bar chart
fig_bill_stacked_bar_fuel_oil_on_top <- ggplot(
  annual_bills_by_component_plot,
  aes(x = scenario, y = amount, fill = charge_type)
) +
  geom_col() +
  labs(
    title = "Components of Annual Electricity Bill",
    x = "",
    y = "Annual Cost ($)",
    fill = "Charge Type"
  ) +
  scale_fill_manual(
    values = bill_component_colors[c("customer_charge", "delivery_charge", "supply_charge", "annual_fuel_oil_bill")],
    breaks = c("customer_charge", "delivery_charge", "supply_charge", "annual_fuel_oil_bill"),
    labels = c("Customer charge", "Delivery charge", "Supply charge", "Fuel Oil Bill")
  ) +
  scale_y_continuous(labels = scales::dollar_format(), limits = c(0, 6000), breaks = seq(0, 5000, by = 1000), expand = c(0, 0)) +
  scale_x_discrete(labels = c(
    current_baseline = "Current HVAC\nCurrent Rates",
    hp_high_baseline = "Cold Climate HP\nCurrent Rates"
  )) +
  coord_cartesian(clip = "off") +
  theme(
    text = element_text(family = "IBM-Plex-Sans"),
    axis.title.x = element_text(margin = margin(t = 3)),
    axis.title.y = element_text(margin = margin(r = 3)),
    legend.position = "bottom",
    plot.margin = margin(t = 3, r = 200, b = 0, l = 10, unit = "pt")
  ) +

  # instead of a legend, write annotation for the 3 categories to the right of the right-most bar
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge / 2) + y_annotation_offset,
    label = "Customer Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["customer_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge / 2 + y_annotation_offset,
    label = "Delivery Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["delivery_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge + y_rightmost_supply_charge / 2 + y_annotation_offset,
    label = "Supply Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["supply_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge + y_rightmost_supply_charge + y_rightmost_fuel_oil_bill / 2 + y_annotation_offset,
    label = "Fuel Oil Bill",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["annual_fuel_oil_bill"],
    size = annotation_text_size,
    fontface = "bold"
  ) +

  # No legend
  theme(legend.position = "none")

print(fig_bill_stacked_bar_fuel_oil_on_top)
#
#
#
#
#| label: fig-monthly_bills_fuel_oil_before
#| fig-cap: "The electric bill components and total fuel oil bill for fuel oil heated homes, before upgrade."

monthly_bills_elec_by_component <- monthly_bills_elec |>
  # add some metadata from housing_units
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Fuel Oil") |>
  # rename hvac column to "current" (was natural_gas, propane, etc)
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  # get just the current and hp_high cases
  filter(
    (hvac == "current" & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, electric_utility, version, hvac, month) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup()

monthly_bills_fuel_oil_by_component <- monthly_bills_fuel_oil |>
  # add some metadata from housing_units
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Fuel Oil") |>
  # rename hvac column to "current" (was natural_gas, propane, etc)
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  # get just the current and hp_high cases
  filter(
    (hvac == "current" & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, hvac, month) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup() |>
  mutate(
    total_fuel_oil_bill = supply_charge + delivery_charge + customer_charge
  ) |>
  # drop the supply_charge, delivery_charge, and customer_charge columns
  select(-supply_charge, -delivery_charge, -customer_charge)

monthly_bills_combined_fuel_oil_customers <- monthly_bills_elec_by_component |>
  left_join(monthly_bills_fuel_oil_by_component, by = c("upgrade", "hvac", "month")) |>
  mutate(total_bill = supply_charge + delivery_charge + customer_charge + total_fuel_oil_bill)



# Create 12 stacked bars, one for each month, for upgrade==0
monthly_bills_combined_fuel_oil_customers_long <- monthly_bills_combined_fuel_oil_customers |>
  pivot_longer(
    cols = c(customer_charge, delivery_charge, supply_charge, total_fuel_oil_bill, total_bill),
    names_to = "component",
    values_to = "amount"
  )

# Set factor order for stacking: customer_charge (bottom), delivery_charge (middle), supply_charge (top)
monthly_bills_combined_fuel_oil_customers_long$component <- factor(
  monthly_bills_combined_fuel_oil_customers_long$component,
  levels = c("total_fuel_oil_bill", "supply_charge", "delivery_charge", "customer_charge", "total_bill")
)


bill_component_colors <- c(
  "total_fuel_oil_bill" = "grey50", # grey
  "supply_charge" = "#A0AF12",
  "delivery_charge" = "#023047",
  "customer_charge" = "#68BED8",
  "total_bill" = "red"
)

print(ggplot(
  monthly_bills_combined_fuel_oil_customers_long |>
    filter(upgrade == 0) |>
    filter(component != "total_bill"),
  aes(
    x = month,
    y = amount,
    fill = component
  )
) +
  geom_bar(stat = "identity", width = 0.35) +
  scale_fill_manual(values = bill_component_colors) +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    x = "Month",
    y = "Median Monthly Total Bill ($)",
    title = "Median Monthly Total Bill (Electric + Fuel Oil)",
    subtitle = "Fuel oil-heated homes, before upgrade"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  ))

#
#
#
#
#
#| label: fig-monthly_bills_fuel_oil_after
#| fig-cap: "The electric bill components and total fuel oil bill for fuel oil heated homes, after upgrade."

ggplot() +
  # BEFORE
  geom_bar(
    data = monthly_bills_combined_fuel_oil_customers_long |>
      filter(upgrade == 0) |>
      filter(component != "total_bill"),
    aes(x = month - 0.2, y = amount, fill = component),
    stat = "identity",
    width = 0.35
  ) +
  # AFTER
  geom_bar(
    data = monthly_bills_combined_fuel_oil_customers_long |>
      filter(upgrade == upgrade_option) |>
      filter(component != "total_bill"),
    aes(x = month + 0.2, y = amount, fill = component),
    stat = "identity",
    width = 0.35
  ) +
  scale_fill_manual(values = bill_component_colors) +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    x = "Month",
    y = "Median Monthly Total Bill ($)",
    title = "Median Monthly Total Bill (Electric + Fuel Oil)",
    subtitle = "Fuel oil-heated homes, after upgrade"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )

#
#
#
#
#
#
#| label: fig-stacked_bar_median_before_after_resistance
#| fig-cap: "Components of total household energy bills for homes heated with natural gas, before and after upgrade to a high-efficiency cold-climate heat pump. The left column shows the median bill before upgrade, the right column shows the median bill after upgrade."

stack_order_resistance_on_top <- c(
  "annual_elec_supply_charge", # top
  "annual_elec_delivery_charge", # middle
  "annual_elec_customer_charge" # bottom
)

components <- factor(stack_order_resistance_on_top, levels = stack_order_resistance_on_top)

annual_bills_elec_by_component <- monthly_bills_elec |>
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Electric Resistance") |>
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  group_by(bldg_id, upgrade, electric_utility, version, hvac) |>
  summarise(
    supply_charge = sum(supply_charge),
    delivery_charge = sum(delivery_charge),
    customer_charge = sum(customer_charge),
    .groups = "drop"
  ) |>
  ungroup() |>
  filter(
    (!(hvac %in% c("hp_low", "hp_high", "hp_best")) & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, electric_utility, version, hvac) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup()


annual_bills_by_component_plot <- annual_bills_elec_by_component |>
  pivot_longer(
    cols = c(supply_charge, delivery_charge, customer_charge),
    names_to = "charge_type",
    values_to = "amount"
  ) |>
  mutate(
    charge_type = factor(charge_type, levels = c("supply_charge", "delivery_charge", "customer_charge")),
    scenario = factor(paste(hvac, version, sep = "_"),
      levels = c("current_baseline", "hp_high_baseline")
    )
  ) |>
  filter(electric_utility == "rhode_island_energy")

y_rightmost_customer_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "customer_charge") |>
  pull(amount)
y_rightmost_delivery_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "delivery_charge") |>
  pull(amount)
y_rightmost_supply_charge <- annual_bills_by_component_plot |>
  filter(scenario == "hp_high_baseline", charge_type == "supply_charge") |>
  pull(amount)

annotation_text_size <- 4
y_annotation_offset <- 0
x_label_offset <- 2.5

# Create the stacked bar chart
fig_bill_stacked_bar_resistance_on_top <- ggplot(
  annual_bills_by_component_plot,
  aes(x = scenario, y = amount, fill = charge_type)
) +
  geom_col() +
  labs(
    title = "Components of Annual Electricity Bill",
    x = "",
    y = "Annual Cost ($)",
    fill = "Charge Type"
  ) +
  scale_fill_manual(
    values = bill_component_colors[c("customer_charge", "delivery_charge", "supply_charge")],
    breaks = c("customer_charge", "delivery_charge", "supply_charge"),
    labels = c("Customer charge", "Delivery charge", "Supply charge")
  ) +
  scale_y_continuous(labels = scales::dollar_format(), limits = c(0, 4500), breaks = seq(0, 5000, by = 1000), expand = c(0, 0)) +
  scale_x_discrete(labels = c(
    current_baseline = "Current HVAC\nCurrent Rates",
    hp_high_baseline = "Cold Climate HP\nCurrent Rates"
  )) +
  coord_cartesian(clip = "off") +
  theme(
    text = element_text(family = "IBM-Plex-Sans"),
    axis.title.x = element_text(margin = margin(t = 3)),
    axis.title.y = element_text(margin = margin(r = 3)),
    legend.position = "bottom",
    plot.margin = margin(t = 3, r = 200, b = 0, l = 10, unit = "pt")
  ) +

  # instead of a legend, write annotation for the 3 categories to the right of the right-most bar
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge / 2) + y_annotation_offset,
    label = "Customer Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["customer_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge / 2 + y_annotation_offset,
    label = "Delivery Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["delivery_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +
  annotate(
    "text",
    x = x_label_offset,
    y = (y_rightmost_customer_charge) + y_rightmost_delivery_charge + y_rightmost_supply_charge / 2 + y_annotation_offset,
    label = "Supply Charge",
    hjust = 0,
    family = "IBM-Plex-Sans",
    color = bill_component_colors["supply_charge"],
    size = annotation_text_size,
    fontface = "bold"
  ) +

  # No legend
  theme(legend.position = "none")

print(fig_bill_stacked_bar_resistance_on_top)
#
#
#
#
#| label: fig-monthly_bills_resistance_before
#| fig-cap: "The electric bill components and total fuel oil bill for fuel oil heated homes, before upgrade."

monthly_bills_elec_by_component <- monthly_bills_elec |>
  # add some metadata from housing_units
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Electric Resistance") |>
  # rename hvac column to "current" (was natural_gas, propane, etc)
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  # get just the current and hp_high cases
  filter(
    (hvac == "current" & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, electric_utility, version, hvac, month) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup()

monthly_bills_resistance_by_component <- monthly_bills_elec |>
  # add some metadata from housing_units
  left_join(housing_units |> filter(upgrade == 0) |> select(bldg_id, baseline_heating_type), by = c("bldg_id")) |>
  filter(baseline_heating_type == "Electric Resistance") |>
  # rename hvac column to "current" (was natural_gas, propane, etc)
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  # get just the current and hp_high cases
  filter(
    (hvac == "current" & version == "baseline") |
      (hvac == hp_option & version == "baseline")
  ) |>
  # take the median for each group
  group_by(upgrade, hvac, month) |>
  summarise(
    supply_charge = median(supply_charge),
    delivery_charge = median(delivery_charge),
    customer_charge = median(customer_charge),
    .groups = "drop"
  ) |>
  ungroup() |>
  mutate(
    total_elec_bill = supply_charge + delivery_charge + customer_charge
  ) |>
  # drop the supply_charge, delivery_charge, and customer_charge columns
  select(-supply_charge, -delivery_charge, -customer_charge)

monthly_bills_combined_resistance_customers <- monthly_bills_elec_by_component |>
  left_join(monthly_bills_resistance_by_component, by = c("upgrade", "hvac", "month")) |>
  mutate(total_bill = supply_charge + delivery_charge + customer_charge + total_elec_bill)



# Create 12 stacked bars, one for each month, for upgrade==0
monthly_bills_combined_resistance_customers_long <- monthly_bills_combined_resistance_customers |>
  pivot_longer(
    cols = c(customer_charge, delivery_charge, supply_charge, total_elec_bill, total_bill),
    names_to = "component",
    values_to = "amount"
  )

# Set factor order for stacking: customer_charge (bottom), delivery_charge (middle), supply_charge (top)
monthly_bills_combined_resistance_customers_long$component <- factor(
  monthly_bills_combined_resistance_customers_long$component,
  levels = c("total_elec_bill", "supply_charge", "delivery_charge", "customer_charge", "total_bill")
)


bill_component_colors <- c(
  "total_elec_bill" = "grey50", # grey
  "supply_charge" = "#A0AF12",
  "delivery_charge" = "#023047",
  "customer_charge" = "#68BED8",
  "total_bill" = "red"
)

print(ggplot(
  monthly_bills_combined_resistance_customers_long |>
    filter(upgrade == 0) |>
    filter(component != "total_bill"),
  aes(
    x = month,
    y = amount,
    fill = component
  )
) +
  geom_bar(stat = "identity", width = 0.35) +
  scale_fill_manual(values = bill_component_colors) +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    x = "Month",
    y = "Median Monthly Total Bill ($)",
    title = "Median Monthly Total Bill (Electric + Electric Resistance)",
    subtitle = "Electric resistance-heated homes, before upgrade"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  ))

#
#
#
#
#| label: fig-monthly_bills_resistance_after
#| fig-cap: "The electric bill components and total fuel oil bill for fuel oil heated homes, after upgrade."

ggplot() +
  # BEFORE
  geom_bar(
    data = monthly_bills_combined_resistance_customers_long |>
      filter(upgrade == 0) |>
      filter(component != "total_bill"),
    aes(x = month - 0.2, y = amount, fill = component),
    stat = "identity",
    width = 0.35
  ) +
  # AFTER
  geom_bar(
    data = monthly_bills_combined_resistance_customers_long |>
      filter(upgrade == upgrade_option) |>
      filter(component != "total_bill"),
    aes(x = month + 0.2, y = amount, fill = component),
    stat = "identity",
    width = 0.35
  ) +
  scale_fill_manual(values = bill_component_colors) +
  scale_x_continuous(breaks = 1:12, labels = month.abb) +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    x = "Month",
    y = "Median Monthly Total Bill ($)",
    title = "Median Monthly Total Electricity Bill",
    subtitle = "Electric resistance-heated homes, after upgrade"
  ) +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )

#
#
#
#
#
#| label: fig-hist_1_winter_bill_impact
#| fig-cap: "Distribution of annual bill changes by heat pump efficiency, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = winter_changes_total,
  bill_type = "annual_change_total",
  version_elec = "baseline",
  baseline_heating_type_option = "All Fuels",
  hvac_option = "hp_high",
  supply_year = supply_year,
  season = "Winter",
  title = "auto",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 650),
  binwidth = 100
)

category_percentages <- result[[2]]

print(result[[1]])
#
#
#
#
#| label: fig-hist_1_summer_bill_impact
#| fig-cap: "Distribution of annual bill changes by heat pump efficiency, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = summer_changes_total,
  bill_type = "annual_change_total",
  version_elec = "baseline",
  baseline_heating_type_option = "All Fuels",
  hvac_option = "hp_high",
  supply_year = supply_year,
  season = "Summer",
  title = "auto",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 650),
  binwidth = 100
)

category_percentages <- result[[2]]

print(result[[1]])
#
#
#
#
#
#| label: fig-bar-fuel-types
#| fig-cap: "Proportion of Rhode Island homes by primary heating fuel."
#| fig-width: 8
#| fig-height: 2

fuel_types_pct <- housing_units |>
  filter(upgrade == 0) |>
  group_by(hvac) |>
  summarize(count = n()) |>
  mutate(percentage = count / sum(count) * 100) |>
  arrange(desc(count)) |>
  mutate(hvac = factor(hvac, levels = rev(hvac)))

fuel_types_pct <- fuel_types_pct |>
  mutate(hvac_group = factor(hvac,
    levels = c("Natural Gas", "Propane", "Fuel Oil", "Heat Pump", "Electric Resistance", "Other/None")
  )) |>
  group_by(hvac_group, .drop = FALSE) |>
  summarise(count = sum(count), .groups = "drop") |>
  mutate(
    pct = count / sum(count),
    cum_pct = cumsum(pct),
    pct_label = paste0(hvac_group, ": ", scales::percent(pct, accuracy = 1))
  )


fuel_types_pct_for_plot <- fuel_types_pct |>
  arrange((cum_pct)) |>
  mutate(
    # Start position is the cumulative percentage of previous segments
    start_pos = lag(cum_pct, default = 0),
    # End position is the cumulative percentage including current segment
    end_pos = cum_pct,
    # Center position for text labels
    label_pos = start_pos + pct / 2
  )

ggplot() +
  geom_rect(
    data = fuel_types_pct_for_plot,
    aes(xmin = start_pos, xmax = end_pos, ymin = 0.85, ymax = 1.15, fill = hvac_group)
  ) +
  ggrepel::geom_text_repel(
    data = fuel_types_pct_for_plot,
    aes(x = label_pos, y = 1, label = pct_label, color = hvac_group),
    direction = "y",
    nudge_y = 0.15,
    nudge_x = 0.005,
    size = 3,
    segment.size = 0.0,
    hjust = 0,
    vjust = 0,
    angle = 30
  ) +
  xlim(0, 1.2) +
  ylim(0.8, 1.4) +
  scale_fill_manual(values = heating_type_colors) +
  scale_color_manual(values = heating_type_colors) +
  theme_void() +
  theme(legend.position = "none")
#
#
#
#
#
#
#| label: fig-hist_1_natural_gas_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching from natural gas to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total,
  bill_type = "annual_change_total",
  baseline_heating_type_option = "Natural Gas",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "auto",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 200),
  binwidth = 100
)

annual_change_stats_gas_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#| label: fig-hist_1_fuel_oil_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching from fuel oil to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total,
  bill_type = "annual_change_total",
  baseline_heating_type_option = "Fuel Oil",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "auto",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 200),
  binwidth = 100
)

annual_change_stats_fuel_oil_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#| label: fig-hist_1_resistance_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching from electric resistance to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total,
  bill_type = "annual_change_total",
  baseline_heating_type_option = "Electric Resistance",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "auto",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 200),
  binwidth = 100
)

annual_change_stats_resistance_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#
#| label: fig-bar-building-type
#| fig-cap: "Proportion of RI homes by building type."
#| fig-width: 8
#| fig-height: 2

building_type_pct <- housing_units |>
  filter(upgrade == 0) |>
  group_by(building_type_group) |>
  summarize(count = n()) |>
  mutate(percentage = count / sum(count) * 100) |>
  arrange(desc(count)) |>
  mutate(building_type_group = factor(building_type_group, levels = rev(building_type_group)))

building_type_pct <- building_type_pct |>
  mutate(building_type_group = factor(building_type_group,
    levels = c("Single-Family", "2-4 Units", "5+ Units", "Other")
  )) |>
  group_by(building_type_group, .drop = FALSE) |>
  summarise(count = sum(count), .groups = "drop") |>
  mutate(
    pct = count / sum(count),
    cum_pct = cumsum(pct),
    pct_label = paste0(building_type_group, ": ", scales::percent(pct, accuracy = 1))
  )


building_type_pct_for_plot <- building_type_pct |>
  arrange((cum_pct)) |>
  mutate(
    # Start position is the cumulative percentage of previous segments
    start_pos = lag(cum_pct, default = 0),
    # End position is the cumulative percentage including current segment
    end_pos = cum_pct,
    # Center position for text labels
    label_pos = start_pos + pct / 2
  ) |>
  filter(building_type_group != "Other")

ggplot() +
  geom_rect(
    data = building_type_pct_for_plot,
    aes(xmin = start_pos, xmax = end_pos, ymin = 0.85, ymax = 1.15, fill = building_type_group)
  ) +
  ggrepel::geom_text_repel(
    data = building_type_pct_for_plot,
    aes(x = label_pos, y = 1, label = pct_label, color = building_type_group),
    direction = "y",
    nudge_y = 0.15,
    nudge_x = 0.005,
    size = 3,
    segment.size = 0.0,
    hjust = 0,
    vjust = 0,
    angle = 30
  ) +
  xlim(0, 1.2) +
  ylim(0.8, 1.4) +
  scale_fill_manual(values = building_type_colors) +
  scale_color_manual(values = building_type_colors) +
  theme_void() +
  theme(legend.position = "none")
#
#
#
#
#| label: fig-hist_1_single_family_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total |> filter(building_type_group == "Single-Family"),
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "Change in Total Annual Energy Bills for Single-Family Homes Switching to Heat Pumps from All Fuels",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 110),
  binwidth = 100
)

annual_change_stats_single_family_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#| label: fig-hist_1_small_multifamily_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total |> filter(building_type_group == "2-4 Units"),
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "Change in Total Annual Energy Bills for 2-4 Unit Multifamily Buildings Switching to Heat Pumps from All Fuels",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 110),
  binwidth = 100
)

annual_change_stats_small_multifamily_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#| label: fig-hist_1_large_multifamily_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total |> filter(building_type_group == "5+ Units"),
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "Change in Total Annual Energy Bills for 5+ Unit Multifamily Buildings Switching to Heat Pumps from All Fuels",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 110),
  binwidth = 100
)

annual_change_stats_large_multifamily_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#
#
#| label: fig-bar-cooling-types
#| fig-cap: "Proportion of Rhode Island homes by baseline cooling type."
#| fig-width: 8
#| fig-height: 2

cooling_type_pct <- housing_units |>
  filter(upgrade == 0) |>
  group_by(baseline_cooling_type) |>
  summarize(count = n()) |>
  mutate(percentage = count / sum(count) * 100) |>
  arrange(desc(count)) |>
  mutate(baseline_cooling_type = factor(baseline_cooling_type, levels = rev(baseline_cooling_type)))

cooling_type_pct <- cooling_type_pct |>
  mutate(baseline_cooling_type_group = factor(baseline_cooling_type,
    levels = c("Room AC", "Central AC", "Heat Pump", "Other Cooling", "None")
  )) |>
  group_by(baseline_cooling_type_group, .drop = FALSE) |>
  summarise(count = sum(count), .groups = "drop") |>
  mutate(
    pct = count / sum(count),
    cum_pct = cumsum(pct),
    pct_label = paste0(baseline_cooling_type_group, ": ", scales::percent(pct, accuracy = 1))
  )


cooling_type_pct_for_plot <- cooling_type_pct |>
  arrange((cum_pct)) |>
  mutate(
    # Start position is the cumulative percentage of previous segments
    start_pos = lag(cum_pct, default = 0),
    # End position is the cumulative percentage including current segment
    end_pos = cum_pct,
    # Center position for text labels
    label_pos = start_pos + pct / 2
  )

ggplot() +
  geom_rect(
    data = cooling_type_pct_for_plot,
    aes(xmin = start_pos, xmax = end_pos, ymin = 0.85, ymax = 1.15, fill = baseline_cooling_type_group)
  ) +
  ggrepel::geom_text_repel(
    data = cooling_type_pct_for_plot,
    aes(x = label_pos, y = 1, label = pct_label, color = baseline_cooling_type_group),
    direction = "y",
    nudge_y = 0.15,
    nudge_x = 0.005,
    size = 3,
    segment.size = 0.0,
    hjust = 0,
    vjust = 0,
    angle = 30
  ) +
  xlim(0, 1.2) +
  ylim(0.8, 1.4) +
  scale_fill_manual(values = cooling_type_colors) +
  scale_color_manual(values = cooling_type_colors) +
  theme_void() +
  theme(legend.position = "none")
#
#
#
#
#| label: fig-hist_1_room_ac_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total |> filter(baseline_cooling_type == "Room AC"),
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "Change in Total Annual Energy Bills for Homes with Room AC Switching to Heat Pumps from All Fuels",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 160),
  binwidth = 100
)

annual_change_stats_room_ac_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#| label: fig-hist_1_central_ac_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total |> filter(baseline_cooling_type == "Central AC"),
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "Change in Total Annual Energy Bills for Homes with Central AC Switching to Heat Pumps from All Fuels",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 150),
  binwidth = 100
)

annual_change_stats_central_ac_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#| label: fig-hist_1_no_cooling_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total |> filter(baseline_cooling_type == "None"),
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = "baseline",
  hvac_option = "hp_high",
  supply_year = supply_year,
  title = "Change in Total Annual Energy Bills for Homes with No Cooling Switching to Heat Pumps from All Fuels",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 160),
  binwidth = 100
)

annual_change_stats_no_cooling_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#
#
#
#| label: energy burden plot parameters
income_threshold_upper <- 500000
income_threshold_lower <- 100
#
#
#
#
#| label: fig-burden_hists_all_smi_tiers
#| cap: "Histogram of energy burdens across all fuel types, all building types, all cooling types, all income levels. Assuming 100% participation in low-income discounts."

# TOP: Current HVAC, 100% Discounts, Default Rates
burden_hists_all_current <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "current"
    ),
  name = "Current HVAC, 100% Discounts, Default Rates",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = c(0, 70000 / 242.13),
  x_limits = c(0, 0.3)
)

burden_hists_all_current_plot <- burden_hists_all_current[[1]]
burden_hists_all_current_pct <- burden_hists_all_current[[2]]

burden_hists_all_current_pct_very_high_burden <- burden_hists_all_current_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_current_pct_high_burden <- burden_hists_all_current_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_current_pct_moderate_burden <- burden_hists_all_current_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_current_pct_low_burden <- burden_hists_all_current_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_current_pct_burdened <- burden_hists_all_current_pct_very_high_burden + burden_hists_all_current_pct_high_burden

# BOTTOM: Cold Climate Heat Pump, 100% Discounts, Default Rates
burden_hists_all_hp_high <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "hp_high"
    ),
  name = "Cold Climate Heat Pump, 100% Discounts, Default Rates",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = c(0, 70000 / 242.13),
  x_limits = c(0, 0.3)
)

burden_hists_all_hp_high_plot <- burden_hists_all_hp_high[[1]]
burden_hists_all_hp_high_pct <- burden_hists_all_hp_high[[2]]

burden_hists_all_hp_high_pct_very_high_burden <- burden_hists_all_hp_high_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_hp_high_pct_high_burden <- burden_hists_all_hp_high_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_hp_high_pct_moderate_burden <- burden_hists_all_hp_high_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_hp_high_pct_low_burden <- burden_hists_all_hp_high_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_all_hp_high_pct_burdened <- burden_hists_all_hp_high_pct_very_high_burden + burden_hists_all_hp_high_pct_high_burden

# Combine the two histograms
burden_hists_all_combined <- burden_hists_all_current_plot / burden_hists_all_hp_high_plot +
  plot_layout(
    heights = c(1, 1)
  ) +
  plot_annotation(
    title = "Winter Energy Burdens in Rhode Island: Current HVAC vs. Cold Climate Heat Pump",
    subtitle = paste0("Among households of annual income <", scales::dollar(income_threshold_upper)),
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 9, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 8),
      plot.margin = margin(10, 10, 10, 10) # Much smaller overall margins
    )
  )

# Wrap the plot to add a shared y-axis label on the left
burden_hists_all_combined <- wrap_elements(burden_hists_all_combined) +
  labs(tag = "# of Homes") +
  theme(
    plot.tag = element_text(angle = 90, vjust = 0.5, hjust = 0.5, face = "plain", size = 9),
    plot.tag.position = "left"
  )

print(burden_hists_all_combined)

#
#
#
#
#| label: fig-bar_dollar_tiers
#| fig-cap: "Proportion of RI homes by dollar tier."
#| fig-width: 8
#| fig-height: 2

dollar_tier_pct <- housing_units |>
  filter(upgrade == 0) |>
  group_by(dollar_tier) |>
  summarize(count = n()) |>
  mutate(percentage = count / sum(count) * 100) |>
  arrange(desc(count)) |>
  mutate(dollar_tier = factor(dollar_tier, levels = rev(dollar_tier)))

dollar_tier_pct <- dollar_tier_pct |>
  mutate(dollar_tier = factor(dollar_tier,
    levels = c("Low Income", "Moderate Income", "Not LMI")
  )) |>
  group_by(dollar_tier, .drop = FALSE) |>
  summarise(count = sum(count), .groups = "drop") |>
  mutate(
    pct = count / sum(count),
    cum_pct = cumsum(pct),
    pct_label = paste0(dollar_tier, ": ", scales::percent(pct, accuracy = 1))
  )


dollar_tier_pct_for_plot <- dollar_tier_pct |>
  arrange((cum_pct)) |>
  mutate(
    # Start position is the cumulative percentage of previous segments
    start_pos = lag(cum_pct, default = 0),
    # End position is the cumulative percentage including current segment
    end_pos = cum_pct,
    # Center position for text labels
    label_pos = start_pos + pct / 2
  )

ggplot() +
  geom_rect(
    data = dollar_tier_pct_for_plot,
    aes(xmin = start_pos, xmax = end_pos, ymin = 0.85, ymax = 1.15, fill = dollar_tier)
  ) +
  ggrepel::geom_text_repel(
    data = dollar_tier_pct_for_plot,
    aes(x = label_pos, y = 1, label = pct_label, color = dollar_tier),
    direction = "y",
    nudge_y = 0.15,
    nudge_x = 0.005,
    size = 3,
    segment.size = 0.0,
    hjust = 0,
    vjust = 0,
    angle = 30
  ) +
  xlim(0, 1.2) +
  ylim(0.8, 1.4) +
  scale_fill_manual(values = dollar_tier_colors) +
  scale_color_manual(values = dollar_tier_colors) +
  theme_void() +
  theme(legend.position = "none")
#
#
#
#
#| label: fig-bar_smi_tiers
#| fig-cap: "Proportion of RI homes by State Median Income (SMI) tier. SMI considers both the household's income and the number of occupants in the household."
#| fig-width: 8
#| fig-height: 2

smi_tier_pct <- housing_units |>
  filter(upgrade == 0) |>
  group_by(smi_tier) |>
  summarize(count = n()) |>
  mutate(percentage = count / sum(count) * 100) |>
  arrange(desc(count)) |>
  mutate(smi_tier = factor(smi_tier, levels = rev(smi_tier)))

smi_tier_pct <- smi_tier_pct |>
  mutate(
    smi_tier_label = recode(
      smi_tier,
      "No Income" = "No Income",
      "Low Income" = "Low Income (<60% SMI)",
      "Moderate Income" = "Moderate Income (60â€“100% SMI)",
      "Not LMI" = "Not LMI (>100% SMI)"
    ),
    smi_tier_label = factor(
      smi_tier_label,
      levels = c("Low Income (<60% SMI)", "Moderate Income (60â€“100% SMI)", "Not LMI (>100% SMI)")
    )
  ) |>
  group_by(smi_tier_label, .drop = FALSE) |>
  summarise(count = sum(count), .groups = "drop") |>
  mutate(
    pct = count / sum(count),
    cum_pct = cumsum(pct),
    pct_label = paste0(smi_tier_label, ": ", scales::percent(pct, accuracy = 1))
  )


smi_tier_pct_for_plot <- smi_tier_pct |>
  arrange((cum_pct)) |>
  mutate(
    # Start position is the cumulative percentage of previous segments
    start_pos = lag(cum_pct, default = 0),
    # End position is the cumulative percentage including current segment
    end_pos = cum_pct,
    # Center position for text labels
    label_pos = start_pos + pct / 2
  )

ggplot() +
  geom_rect(
    data = smi_tier_pct_for_plot,
    aes(xmin = start_pos, xmax = end_pos, ymin = 0.85, ymax = 1.15, fill = smi_tier_label)
  ) +
  ggrepel::geom_text_repel(
    data = smi_tier_pct_for_plot,
    aes(x = label_pos, y = 1, label = pct_label, color = smi_tier_label),
    direction = "y",
    nudge_y = 0.15,
    nudge_x = 0.005,
    size = 3,
    segment.size = 0.0,
    hjust = 0,
    vjust = 0,
    angle = 10
  ) +
  xlim(0, 1.2) +
  ylim(0.8, 1.4) +
  scale_fill_manual(values = smi_tier_label_colors) +
  scale_color_manual(values = smi_tier_label_colors) +
  theme_void() +
  theme(legend.position = "none")
#
#
#
#
#| label: fig-scatter_income_burden_total
#| fig-cap: "Scatter plot of today's energy burdens (all fuels, no transportation costs) vs. household income. Each point represents a home in our ResStock sample."
# make a scatter plot: x = in.representative_income, y = burden_total
income_threshold_upper <- 300000
income_threshold_lower <- 4000
alpha <- 0.2
x_limits <- c(0, 0.5)
y_limits <- c(0, income_threshold_upper)

# Prepare the filtered data first
filtered_bills_total <- annual_bills_total |>
  mutate(
    hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
  ) |>
  filter(
    in.representative_income <= income_threshold_upper,
    in.representative_income >= income_threshold_lower,
    version_elec == "baseline",
    hvac == "current"
  )

# Fit a reciprocal model: in.representative_income ~ I(1 / burden_total)
recip_model <- lm(in.representative_income ~ I(1 / burden_total), data = filtered_bills_total)

annual_bills_total_plot <- ggplot(filtered_bills_total, aes(x = burden_total, y = in.representative_income)) +
  geom_point() +
  stat_smooth(
    method = "lm",
    formula = y ~ I(1 / x),
    se = FALSE,
    color = "red",
    linetype = "dashed",
    size = 1
  ) +
  labs(
    title = "Burden Total vs. Income",
    x = "Energy Burden (All fuels, no transportation costs)",
    y = "Income"
  ) +
  xlim(x_limits[1], x_limits[2]) +
  theme(
    panel.grid.major = element_line(linewidth = 0.2),
    panel.grid.minor = element_blank(),
    aspect.ratio = 0.5,
    axis.title.x = element_text(size = 8),
    axis.title.y = element_text(size = 8)
  ) +
  scale_x_continuous(
    breaks = c(0, 0.03, 0.06, 0.12, 0.2, 0.5),
    labels = scales::percent_format(accuracy = 1),
    limits = x_limits
  ) +
  # make 4 shaded boxes between the breaks
  annotate("rect", xmin = 0, xmax = 0.03, ymin = 0, ymax = y_limits[2], fill = energy_burden_colors["low_energy_burden"], alpha = alpha) +
  annotate("rect", xmin = 0.03, xmax = 0.06, ymin = 0, ymax = y_limits[2], fill = energy_burden_colors["moderate_energy_burden"], alpha = alpha) +
  annotate("rect", xmin = 0.06, xmax = 0.12, ymin = 0, ymax = y_limits[2], fill = energy_burden_colors["high_energy_burden"], alpha = alpha) +
  annotate("rect", xmin = 0.12, xmax = x_limits[2], ymin = 0, ymax = y_limits[2], fill = energy_burden_colors["very_high_energy_burden"], alpha = alpha) +
  scale_y_continuous(
    breaks = c(0, 100000, 200000, 300000, 400000),
    limits = y_limits,
    labels = scales::dollar_format()
  )

print(annual_bills_total_plot)

#
#
#
#
#
#| label: fig-burden_hists_3_smi_tiers_current
#| fig-cap: "Histogram of energy burdens across all fuel types, all building types, all cooling types, all income levels. Assuming 100% participation in low-income discounts."

y_limits <- c(0, 50000 / 242.13)

# TOP: Current HVAC, 100% Discounts, Default Rates, Low SMI tier
burden_hists_low_smi_current <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      smi_tier == "Low Income",
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "current"
    ),
  name = "Current HVAC, 100% Discounts, Default Rates, Low SMI tier",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = y_limits,
  x_limits = c(0, 0.3)
)

burden_hists_low_smi_current_plot <- burden_hists_low_smi_current[[1]]
burden_hists_low_smi_current_pct <- burden_hists_low_smi_current[[2]]

burden_hists_low_smi_current_pct_very_high_burden <- burden_hists_low_smi_current_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_current_pct_high_burden <- burden_hists_low_smi_current_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_current_pct_moderate_burden <- burden_hists_low_smi_current_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_current_pct_low_burden <- burden_hists_low_smi_current_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_current_pct_burdened <- burden_hists_low_smi_current_pct_very_high_burden + burden_hists_low_smi_current_pct_high_burden

# Middle: Current HVAC, 100% Discounts, Default Rates, Moderate SMI tier
burden_hists_moderate_smi_current <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      smi_tier == "Moderate Income",
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "current"
    ),
  name = "Current HVAC, 100% Discounts, Default Rates, Moderate SMI tier",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = y_limits,
  x_limits = c(0, 0.3)
)

burden_hists_moderate_smi_current_plot <- burden_hists_moderate_smi_current[[1]]
burden_hists_moderate_smi_current_pct <- burden_hists_moderate_smi_current[[2]]

burden_hists_moderate_smi_current_pct_very_high_burden <- burden_hists_moderate_smi_current_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_current_pct_high_burden <- burden_hists_moderate_smi_current_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_current_pct_moderate_burden <- burden_hists_moderate_smi_current_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_current_pct_low_burden <- burden_hists_moderate_smi_current_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_current_pct_burdened <- burden_hists_moderate_smi_current_pct_very_high_burden + burden_hists_moderate_smi_current_pct_high_burden


# Bottom: Current HVAC, 100% Discounts, Default Rates, Not LMI tier
burden_hists_not_lmi_current <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      smi_tier == "Not LMI",
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "current"
    ),
  name = "Current HVAC, 100% Discounts, Default Rates, Not LMI tier",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = y_limits,
  x_limits = c(0, 0.3)
)

burden_hists_not_lmi_current_plot <- burden_hists_not_lmi_current[[1]]
burden_hists_not_lmi_current_pct <- burden_hists_not_lmi_current[[2]]

burden_hists_not_lmi_current_pct_very_high_burden <- burden_hists_not_lmi_current_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_current_pct_high_burden <- burden_hists_not_lmi_current_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_current_pct_moderate_burden <- burden_hists_not_lmi_current_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_current_pct_low_burden <- burden_hists_not_lmi_current_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_current_pct_burdened <- burden_hists_not_lmi_current_pct_very_high_burden + burden_hists_not_lmi_current_pct_high_burden


# Combine the three histograms
burden_hists_3_smi_tiers_current_combined <- burden_hists_low_smi_current_plot / burden_hists_moderate_smi_current_plot / burden_hists_not_lmi_current_plot +
  plot_layout(
    heights = c(1, 1, 1)
  ) +
  plot_annotation(
    title = "Annual Energy Burdens in Rhode Island: Current HVAC for 3 SMI tiers",
    subtitle = paste0("Among households of annual income <", scales::dollar(income_threshold_upper)),
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 9, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 8),
      plot.margin = margin(10, 10, 10, 10)
    )
  )

# Wrap the plot to add a shared y-axis label on the left
burden_hists_3_smi_tiers_current_combined <- wrap_elements(burden_hists_3_smi_tiers_current_combined) +
  labs(tag = "# of Homes") +
  theme(
    plot.tag = element_text(angle = 90, vjust = 0.5, hjust = 0.5, face = "plain", size = 9),
    plot.tag.position = "left"
  )

print(burden_hists_3_smi_tiers_current_combined)
#
#
#
#
#| label: fig-burden_hists_3_smi_tiers_hp_high
#| fig-cap: "Histogram of energy burdens across all fuel types, all building types, all cooling types, all income levels. Assuming 100% participation in low-income discounts."

y_limits <- c(0, 50000 / 242.13)

# TOP: Cold Climate Heat Pump, 100% Discounts, Default Rates, Low SMI tier
burden_hists_low_smi_hp_high <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      smi_tier == "Low Income",
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "hp_low"
    ),
  name = "Cold Climate Heat Pump, 100% Discounts, Default Rates, Low SMI tier",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = y_limits,
  x_limits = c(0, 0.3)
)

burden_hists_low_smi_hp_high_plot <- burden_hists_low_smi_hp_high[[1]]
burden_hists_low_smi_hp_high_pct <- burden_hists_low_smi_hp_high[[2]]

burden_hists_low_smi_hp_high_pct_very_high_burden <- burden_hists_low_smi_hp_high_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_hp_high_pct_high_burden <- burden_hists_low_smi_hp_high_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_hp_high_pct_moderate_burden <- burden_hists_low_smi_hp_high_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_hp_high_pct_low_burden <- burden_hists_low_smi_hp_high_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_low_smi_hp_high_pct_burdened <- burden_hists_low_smi_hp_high_pct_very_high_burden + burden_hists_low_smi_hp_high_pct_high_burden

# Middle: Cold Climate Heat Pump, 100% Discounts, Default Rates, Moderate SMI tier
burden_hists_moderate_smi_hp_high <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      smi_tier == "Moderate Income",
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "hp_low"
    ),
  name = "Cold Climate Heat Pump, 100% Discounts, Default Rates, Moderate SMI tier",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = y_limits,
  x_limits = c(0, 0.3)
)

burden_hists_moderate_smi_hp_high_plot <- burden_hists_moderate_smi_hp_high[[1]]
burden_hists_moderate_smi_hp_high_pct <- burden_hists_moderate_smi_hp_high[[2]]

burden_hists_moderate_smi_hp_high_pct_very_high_burden <- burden_hists_moderate_smi_hp_high_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_hp_high_pct_high_burden <- burden_hists_moderate_smi_hp_high_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_hp_high_pct_moderate_burden <- burden_hists_moderate_smi_hp_high_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_hp_high_pct_low_burden <- burden_hists_moderate_smi_hp_high_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_moderate_smi_hp_high_pct_burdened <- burden_hists_moderate_smi_hp_high_pct_very_high_burden + burden_hists_moderate_smi_hp_high_pct_high_burden


# Bottom: Cold Climate Heat Pump, 100% Discounts, Default Rates, Not LMI tier
burden_hists_not_lmi_hp_high <- plot_energy_burden_histogram_standalone(
  data = annual_bills_total |>
    mutate(
      hvac = ifelse((!hvac %in% c("hp_low", "hp_high", "hp_best")), "current", hvac)
    ) |>
    filter(
      smi_tier == "Not LMI",
      in.representative_income <= income_threshold_upper,
      in.representative_income >= income_threshold_lower,
      version_elec == "baseline",
      hvac == "hp_low"
    ),
  name = "Cold Climate Heat Pump, 100% Discounts, Default Rates, Not LMI tier",
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  y_limits = y_limits,
  x_limits = c(0, 0.3)
)

burden_hists_not_lmi_hp_high_plot <- burden_hists_not_lmi_hp_high[[1]]
burden_hists_not_lmi_hp_high_pct <- burden_hists_not_lmi_hp_high[[2]]

burden_hists_not_lmi_hp_high_pct_very_high_burden <- burden_hists_not_lmi_hp_high_pct |>
  filter(burden_group == "very_high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_hp_high_pct_high_burden <- burden_hists_not_lmi_hp_high_pct |>
  filter(burden_group == "high_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_hp_high_pct_moderate_burden <- burden_hists_not_lmi_hp_high_pct |>
  filter(burden_group == "moderate_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_hp_high_pct_low_burden <- burden_hists_not_lmi_hp_high_pct |>
  filter(burden_group == "low_energy_burden") |>
  pull(percentage) |>
  round(1)
burden_hists_not_lmi_hp_high_pct_burdened <- burden_hists_not_lmi_hp_high_pct_very_high_burden + burden_hists_not_lmi_hp_high_pct_high_burden


# Combine the three histograms
burden_hists_3_smi_tiers_hp_high_combined <- burden_hists_low_smi_hp_high_plot / burden_hists_moderate_smi_hp_high_plot / burden_hists_not_lmi_hp_high_plot +
  plot_layout(
    heights = c(1, 1, 1)
  ) +
  plot_annotation(
    title = "Annual Energy Burdens in Rhode Island: Cold Climate Heat Pump for 3 SMI tiers",
    subtitle = paste0("Among households of annual income <", scales::dollar(income_threshold_upper)),
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 9, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 8),
      plot.margin = margin(10, 10, 10, 10)
    )
  )

# Wrap the plot to add a shared y-axis label on the left
burden_hists_3_smi_tiers_hp_high_combined <- wrap_elements(burden_hists_3_smi_tiers_hp_high_combined) +
  labs(tag = "# of Homes") +
  theme(
    plot.tag = element_text(angle = 90, vjust = 0.5, hjust = 0.5, face = "plain", size = 9),
    plot.tag.position = "left"
  )

print(burden_hists_3_smi_tiers_hp_high_combined)
#
#
#
#
#| label: fig-hist_1_low_income_annual_change
#| fig-cap: "Distribution of annual bill changes for homes switching to heat pumps, all under baseline rates."

result <- hist_for_single_rate_version(
  annual_change_table = annual_changes_total |> filter(dollar_tier == "Low Income"),
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = "baseline",
  hvac_option = "hp_low",
  supply_year = supply_year,
  title = "Change in Total Annual Energy Bills for Homes with Low Income Switching to Heat Pumps from All Fuels",
  second_subtitle = "Rhode Island",
  x_limits = c(-3000, 3000),
  y_limits = c(0, 160),
  binwidth = 100
)

annual_change_stats_low_income_baseline_hp_high <- result[[2]]

print(result[[1]])
#
#
#
#
#
#
#
#
#
#
#| label: fig-housing_units_pairs_plot
#| fig-cap: "Pairs plot of housing units"
#| fig-width: 14
#| fig-height: 14

housing_units_pairs_plot <- ggpairs(
  housing_units |> filter(upgrade == 0) |> select(
    c("baseline_heating_type", "baseline_cooling_type", "building_type_group", "occupants_group", "smi_tier")
  ),
  lower = list(
    continuous = "density",
    discrete = "count",
    combo = "box_no_facet"
  ),
  upper = list(
    continuous = "density",
    discrete = "count",
    combo = "box_no_facet"
  ),
  # upper = "blank",
  axisLabels = "show",
  columnLabels = c(
    "Baseline Heating Type",
    "Baseline Cooling Type",
    "Building Type Group",
    "Occupants Group",
    "SMI Tier"
  )
) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    axis.title.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
  )

# [1,1] is baseline_heating_type
p11 <- housing_units_pairs_plot[1, 1]
p11 <- p11 + aes(fill = baseline_heating_type) + scale_fill_manual(values = heating_type_colors)
housing_units_pairs_plot[1, 1] <- p11

# [2,2] is baseline_cooling_type
p22 <- housing_units_pairs_plot[2, 2]
p22 <- p22 + aes(fill = baseline_cooling_type) + scale_fill_manual(values = cooling_type_colors)
housing_units_pairs_plot[2, 2] <- p22

# [3,3] is building_type_group
p33 <- housing_units_pairs_plot[3, 3]
p33 <- p33 + aes(fill = building_type_group) + scale_fill_manual(values = building_type_colors)
housing_units_pairs_plot[3, 3] <- p33

# [4,4] is occupants_group
p44 <- housing_units_pairs_plot[4, 4]
p44 <- p44 + aes(fill = occupants_group) + scale_fill_manual(values = occupants_group_colors)
housing_units_pairs_plot[4, 4] <- p44

# [5,5] is smi_tier
p55 <- housing_units_pairs_plot[5, 5]
p55 <- p55 + aes(fill = smi_tier) + scale_fill_manual(values = smi_tier_colors)
housing_units_pairs_plot[5, 5] <- p55

print(housing_units_pairs_plot)

#
#
#
#
#| label: fig-hists_3_bills_by_hp_model_baseline_rates
#| fig-cap: "Distribution of annual bill changes by heat pump efficiency, all under baseline rates."


result_all_fuels <- plot_bill_change_histograms(
  annual_change_table = annual_changes_total,
  bill_type = "annual_change_total",
  baseline_heating_type_option = "All Fuels",
  version_elec = c("baseline", "baseline", "baseline"),
  hvac_option = c("hp_low", "hp_high", "hp_best"),
  supply_year = supply_year,
  second_subtitle = "Rhode Island | Baseline Rates",
  x_limits = c(-2500, 2500),
  y_limits = c(0, 90000) / 242.13,
  binwidth = 100
)

stats <- result_all_fuels[[2]]


plot <- result_all_fuels[[1]]
print(plot)

stats_all_fuels <- annual_changes_total |>
  group_by(hvac, version_elec) |>
  summarise(
    pct_that_save = round(mean(annual_change_total < 0) * 100, round_percent),
    pct_that_save_big = round(mean(annual_change_total < -1000) * 100, round_percent),
    pct_that_lose = round(mean(annual_change_total > 0) * 100, round_percent),
    pct_that_lose_big = round(mean(annual_change_total > 1000) * 100, round_percent)
  ) |>
  ungroup()
#
#
#
#
#
#
#
#
#| label: electric utility revenue impact

# monthly_bills_elec_x <- monthly_bills_elec |> filter(bldg_id == bldg_id_x)

revenue_elec <- monthly_bills_elec |>
  group_by(version, upgrade) |>
  summarise(delivery_sum = sum(delivery_charge, na.rm = TRUE), .groups = "drop") |>
  # add a column called "baseline_revenue" for version == "baseline" and upgrade == 0
  mutate(baseline_revenue = delivery_sum[version == "baseline" & upgrade == 0]) |>
  # scenario revenue normalized by baseline_revenue
  mutate(scenario_revenue = delivery_sum / baseline_revenue) |>
  filter(version %in% c("baseline", "winter25", "winter63"))


#
#
#
#
#
#
#
#| label: export report variables

save(
  # Electric
  winter_bills_elec,
  summer_bills_elec,
  annual_bills_elec,
  winter_changes_elec,
  summer_changes_elec,
  annual_changes_elec,

  # Fuel Oil
  winter_bills_fuel_oil,
  summer_bills_fuel_oil,
  annual_bills_fuel_oil,
  winter_changes_fuel_oil,
  summer_changes_fuel_oil,
  annual_changes_fuel_oil,

  # Propane
  winter_bills_propane,
  summer_bills_propane,
  annual_bills_propane,
  winter_changes_propane,
  summer_changes_propane,
  annual_changes_propane,

  # Natural Gas
  winter_bills_gas,
  summer_bills_gas,
  annual_bills_gas,
  winter_changes_gas,
  summer_changes_gas,
  annual_changes_gas,

  # fuel type
  stats_all_fuels,
  fuel_types_pct,
  annual_change_stats_gas_baseline_hp_high,
  annual_change_stats_fuel_oil_baseline_hp_high,
  annual_change_stats_resistance_baseline_hp_high,

  # building type
  building_type_pct,
  annual_change_stats_single_family_baseline_hp_high,
  annual_change_stats_small_multifamily_baseline_hp_high,
  annual_change_stats_large_multifamily_baseline_hp_high,

  # cooling type
  cooling_type_pct,
  annual_change_stats_room_ac_baseline_hp_high,
  annual_change_stats_central_ac_baseline_hp_high,
  annual_change_stats_no_cooling_baseline_hp_high,

  # Energy Burdens section
  ## First histogram: Current HVAC vs. Cold Climate Heat Pump, across all other characteristics
  burden_hists_all_current_pct_very_high_burden,
  burden_hists_all_current_pct_high_burden,
  burden_hists_all_current_pct_moderate_burden,
  burden_hists_all_current_pct_low_burden,
  burden_hists_all_current_pct_burdened,
  burden_hists_all_hp_high_pct_very_high_burden,
  burden_hists_all_hp_high_pct_high_burden,
  burden_hists_all_hp_high_pct_moderate_burden,
  burden_hists_all_hp_high_pct_low_burden,
  burden_hists_all_hp_high_pct_burdened,

  ## Second histogram: Current HVAC for 3 SMI tiers
  burden_hists_low_smi_current_pct_very_high_burden,
  burden_hists_low_smi_current_pct_high_burden,
  burden_hists_low_smi_current_pct_moderate_burden,
  burden_hists_low_smi_current_pct_low_burden,
  burden_hists_low_smi_current_pct_burdened,
  burden_hists_moderate_smi_current_pct_very_high_burden,
  burden_hists_moderate_smi_current_pct_high_burden,
  burden_hists_moderate_smi_current_pct_moderate_burden,
  burden_hists_moderate_smi_current_pct_low_burden,
  burden_hists_moderate_smi_current_pct_burdened,
  burden_hists_not_lmi_current_pct_very_high_burden,
  burden_hists_not_lmi_current_pct_high_burden,
  burden_hists_not_lmi_current_pct_moderate_burden,
  burden_hists_not_lmi_current_pct_low_burden,
  burden_hists_not_lmi_current_pct_burdened,
  file = "/workspaces/reports2/src/ri_hp_rates/cache/report_variables.RData"
)

#
#
#
