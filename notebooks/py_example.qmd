---
title: "Python Data Analysis Example"
author: "{{ author }}"
date: today
format: html
jupyter: python3
---

# Python Data Analysis with Polars and Seaborn

This notebook demonstrates basic data analysis using modern Python tools: **Polars** for data manipulation and **Seaborn** for visualization.

## Setup

```{python}
import polars as pl
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Set up plotting style
sns.set_theme(style="whitegrid")
plt.rcParams["figure.figsize"] = (10, 6)
```

## Create Sample Data

Let's create a sample dataset using Polars:

```{python}
# Generate sample data
np.random.seed(42)
n_samples = 1000

data = pl.DataFrame({
    "category": np.random.choice(["A", "B", "C", "D"], n_samples),
    "value": np.random.normal(50, 15, n_samples),
    "score": np.random.uniform(0, 100, n_samples),
    "group": np.random.choice(["Group1", "Group2"], n_samples)
})

print(f"Dataset shape: {data.shape}")
data.head()
```

## Data Exploration with Polars

Polars provides fast and expressive data manipulation:

```{python}
# Basic statistics
summary_stats = data.select([
    pl.col("value").mean().alias("value_mean"),
    pl.col("value").std().alias("value_std"),
    pl.col("score").mean().alias("score_mean"),
    pl.col("score").std().alias("score_std")
])

print("Summary Statistics:")
summary_stats
```

```{python}
# Group by operations
category_summary = (
    data
    .group_by("category")
    .agg([
        pl.col("value").mean().alias("avg_value"),
        pl.col("score").mean().alias("avg_score"),
        pl.len().alias("count")
    ])
    .sort("avg_value", descending=True)
)

print("Summary by Category:")
category_summary
```

## Data Visualization with Seaborn

Now let's create some visualizations using Seaborn:

```{python}
# Convert to pandas for seaborn (seaborn works best with pandas)
data_pd = data.to_pandas()

# Distribution plot
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

sns.histplot(data=data_pd, x="value", hue="category", alpha=0.7, ax=ax1)
ax1.set_title("Distribution of Values by Category")

sns.boxplot(data=data_pd, x="category", y="score", ax=ax2)
ax2.set_title("Score Distribution by Category")

plt.tight_layout()
plt.show()
```

```{python}
# Scatter plot with regression
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data_pd, x="value", y="score", hue="group", alpha=0.6)
sns.regplot(data=data_pd, x="value", y="score", scatter=False, color="red")
plt.title("Relationship between Value and Score")
plt.show()
```

```{python}
# Correlation heatmap
numeric_data = data_pd.select_dtypes(include=[np.number])
correlation_matrix = numeric_data.corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", center=0)
plt.title("Correlation Matrix")
plt.show()
```

## Advanced Polars Operations

Let's demonstrate some more advanced Polars functionality:

```{python}
# Window functions and complex aggregations
advanced_analysis = (
    data.with_columns(
        [
            # Add rank within each category
            pl.col("value").rank().over("category").alias("value_rank"),
            # Add rolling mean
            pl.col("score").rolling_mean(window_size=50).alias("score_rolling_mean"),
            # Add conditional column
            pl.when(pl.col("value") > pl.col("value").mean())
            .then(pl.lit("Above Average"))
            .otherwise(pl.lit("Below Average"))
            .alias("value_category"),
        ]
    )
    .filter(pl.col("score") > 25)  # Filter for scores > 25
    .sort("value", descending=True)
)

print("Advanced analysis sample:")
advanced_analysis.head(10)
```

## Summary

This notebook demonstrates:

- ✅ **Polars** for fast, expressive data manipulation
- ✅ **Seaborn** for statistical data visualization
- ✅ Integration between Polars and visualization libraries
- ✅ Modern Python data science workflow

### Key Takeaways:

1. **Polars** is faster than pandas for large datasets and has a more consistent API
2. **Seaborn** works well with pandas DataFrames (easy conversion with `.to_pandas()`)
3. The combination provides a powerful, modern data analysis stack
4. Polars' lazy evaluation and columnar operations make it ideal for data processing pipelines

### Next Steps:

- Explore more complex Polars operations (joins, pivots, etc.)
- Try different Seaborn plot types and customizations
- Integrate with other visualization libraries like Plotly or Altair
